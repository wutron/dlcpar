#!/usr/bin/env python
import optparse
from pulp import *
from rasmus import treelib, util
from compbio import phylo

import dlcpar.ilprecon

import collections
import itertools

def parse_args():
    """parse input arguments"""

    parser = optparse.OptionParser(
        usage = "usage: %prog [options] <gene tree>",

        version = "%prog",

        description = 
        "%prog is a program for finding a 2-approximation for DLCpar " + 
        "duplications using ILP",

        epilog = 
        "")

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    grp_io.add_option("-s", dest="stree",
                      metavar = "<species tree>")
    grp_io.add_option("-S", dest="smap",
                      metavar="<species map>")
    parser.add_option_group(grp_io)

    grp_costs = optparse.OptionGroup(parser, "Costs")
    grp_costs.add_option("-D", "--dupcost", dest="dupcost",
                         metavar="<dup cost>",
                         type="float", default=1.0,
                         help="duplication cost (default: 1.0)")
    grp_costs.add_option("-L", "--losscost", dest="losscost",
                         metavar="<loss cost>",
                         type="float", default=1.0,
                         help="loss cost (default: 1.0)")
    grp_costs.add_option("-C", "--coalcost", dest="coalcost",
                         metavar="<coal cost>",
                         type="float", default=0.5,
                         help="deep coalescence cost (default: 0.5)")
    grp_costs.add_option("-K", "--coaldupcost", dest="coaldupcost",
                         metavar="<coal dup cost>",
                         type="float",
                         help="deep coalescence cost for duplication if different")
    parser.set_defaults(explicit=False)
    parser.add_option_group(grp_costs)

    return parser.parse_args()

def main():
    """main"""

    # get input - read the trees
    options, treefile = parse_args()
    stree = treelib.read_tree(options.stree)
    gene2species = phylo.read_gene2species(options.smap)
    gtree = treelib.read_tree(treefile[0])

    if not options.coaldupcost:
        options.coaldupcost = options.coalcost

    return_vals = dlcpar.ilprecon.ilp_recon(gtree, stree, gene2species,
        dupcost=options.dupcost, losscost=options.losscost, coalcost=options.coalcost, coaldupcost=options.coaldupcost,
        implied=True, delay=False)

    gtree, lrecon, runtime, cost = return_vals

    # general output path
    # chop off the final extension
    out = ".".join(treefile[0].split(".")[:-1])

    # info file
    out_info = util.open_stream(out + ".lp.info", 'w')

    out_info.write("Runtime:\t%f sec\n" % runtime)
    out_info.write("Optimal Cost:\t%f\n" % cost)

    out_info.close()
    

if __name__ == "__main__":
    sys.exit(main())
