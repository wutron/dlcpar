#!/usr/bin/env python
import optparse
from pulp import *
from rasmus import treelib, util
from compbio import phylo

import dlcpar.ilprecon

import collections
import itertools
import sys

def parse_args():
    """parse input arguments"""

    parser = optparse.OptionParser(
        usage = "usage: %prog [options] <gene tree>",

        version = "%prog",

        description = 
        "%prog is a program for finding a 2-approximation for DLCpar " + 
        "duplications using ILP",

        epilog = 
        "")

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    grp_io.add_option("-s", dest="stree",
                      metavar = "<species tree>")
    grp_io.add_option("-S", dest="smap",
                      metavar="<species map>")
    grp_io.add_option("--lmap", dest="lmap",
                      metavar="<locus map>",
                      help="gene to locus map (species-specific)")
    parser.add_option_group(grp_io)

    grp_ext = optparse.OptionGroup(parser, "File Extensions")
    grp_ext.add_option("-I","--inputext", dest="inext",
                       metavar="<input file extension>",
                       default="",
                       help="input file extension (default: \"\")")
    grp_ext.add_option("-O", "--outputext", dest="outext",
                       metavar="<output file extension>",
                       default=".dlclp",
                       help="output file extension (default: \".dlclp\")")
    parser.add_option_group(grp_ext)


    grp_costs = optparse.OptionGroup(parser, "Costs")
    grp_costs.add_option("-D", "--dupcost", dest="dupcost",
                         metavar="<dup cost>",
                         type="float", default=1.0,
                         help="duplication cost (default: 1.0)")
    grp_costs.add_option("-L", "--losscost", dest="losscost",
                         metavar="<loss cost>",
                         type="float", default=1.0,
                         help="loss cost (default: 1.0)")
    grp_costs.add_option("-C", "--coalcost", dest="coalcost",
                         metavar="<coal cost>",
                         type="float", default=0.5,
                         help="deep coalescence cost (default: 0.5)")
    grp_costs.add_option("-K", "--coaldupcost", dest="coaldupcost",
                         metavar="<coal dup cost>",
                         type="float",
                         help="deep coalescence cost for duplication if different")
    parser.set_defaults(explicit=False)
    parser.add_option_group(grp_costs)

    return parser.parse_args()

def main():
    """main"""

    # get input - read the trees
    options, [treefile] = parse_args()
    print('treefile', treefile)
    stree = treelib.read_tree(options.stree)
    gene2species = phylo.read_gene2species(options.smap)
    if options.lmap:
        gene2locus = phylo.read_gene2species(options.lmap)
    else:
        gene2locus = None

    gtree = treelib.read_tree(treefile)

    if options.coaldupcost is None:
        options.coaldupcost = options.coalcost
    print('vals', treefile, options.inext, options.outext)
    out = util.replace_ext(treefile, options.inext, options.outext)

    out_tree  = util.open_stream(out + ".tree", 'w')
    out_recon = util.open_stream(out + ".recon", 'w')
    out_order = util.open_stream(out + ".order", 'w')
    filestreams = {"tree" : out_tree,
                   "recon": out_recon,
                   "order": out_order}
    print('gene2lucs', gene2locus)
    return_vals = dlcpar.ilprecon.ilp_recon(gtree, stree, gene2species, gene2locus,
        dupcost=options.dupcost, losscost=options.losscost, coalcost=options.coalcost, coaldupcost=options.coaldupcost,
        implied=True, delay=False)

    gtree, labeled_recon, lrecon, runtime, cost = return_vals

    # general output path
    # chop off the final extension
    out = ".".join(treefile.split(".")[:-1])

    # print('dups:', len(set(lrecon.values())) - 1)
    # print('cost:', cost)

    # info file
    out_info = util.open_stream(out + ".klp.info", 'w')

    out_info.write("Runtime:\t%f sec\n" % runtime)
    out_info.write("Optimal Cost:\t%f\n" % cost)

    if labeled_recon is not None:
        labeled_recon.write(out, gtree, filestreams=filestreams)

    for stream in filestreams.values():
        stream.close()

    out_info.close()

    # write out an actual tree?
    '''
    out_tree = util.open_stream(out + ".klp.tree", "w")
    out_recon = util.open_stream(out + ".klp.recon", "w")
    out_order = util.open_stream(out + ".klp.order", "w")
    filestreams = {"tree" : out_tree,
                   "recon": out_recon,
                   "order": out_order}
    lrecon.write(out + ".klp", gtree, filestreams=filestreams)
    '''

if __name__ == "__main__":
    sys.exit(main())
