#!/usr/bin/env python
import optparse
import sys

from compbio import phylo
from dlcpar import ilprecon
from rasmus import treelib, util


def parse_args():
    """parse input arguments"""

    parser = optparse.OptionParser(
        usage="usage: %prog [options] <gene tree>",
        version="%prog",
        description= '%prog is a program for finding a 2-approximation for DLCpar duplications using ILP',
        epilog=""
    )

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    grp_io.add_option("-s", dest="stree",
                      metavar = "<species tree>")
    grp_io.add_option("-S", dest="smap",
                      metavar="<species map>")
    parser.add_option_group(grp_io)

    grp_ext = optparse.OptionGroup(parser, "File Extensions")
    grp_ext.add_option("-I","--inputext", dest="inext",
                       metavar="<input file extension>",
                       default="",
                       help="input file extension (default: \"\")")
    grp_ext.add_option("-O", "--outputext", dest="outext",
                       metavar="<output file extension>",
                       default=".dlclp",
                       help="output file extension (default: \".dlclp\")")
    parser.add_option_group(grp_ext)

    grp_costs = optparse.OptionGroup(parser, "Costs")
    grp_costs.add_option("-D", "--dupcost", dest="dupcost",
                         metavar="<dup cost>",
                         type="float", default=1.0,
                         help="duplication cost (default: 1.0)")
    grp_costs.add_option("-L", "--losscost", dest="losscost",
                         metavar="<loss cost>",
                         type="float", default=1.0,
                         help="loss cost (default: 1.0)")
    grp_costs.add_option("-C", "--coalcost", dest="coalcost",
                         metavar="<coal cost>",
                         type="float", default=0.5,
                         help="deep coalescence cost (default: 0.5)")
    grp_costs.add_option("-K", "--coaldupcost", dest="coaldupcost",
                         metavar="<coal dup cost>",
                         type="float",
                         help="deep coalescence cost for duplication if different")

    parser.set_defaults(explicit=False)
    parser.add_option_group(grp_costs)

    return parser.parse_args()


def main():
    """main"""

    # get input - read the trees
    options, treefiles = parse_args()

    if len(treefiles) != 1:
        return 'dlclp: error: exactly 1 treefile is required but ' + str(len(treefiles)) + ' treefiles were given'

    treefile = treefiles[0]
    stree = treelib.read_tree(options.stree)
    gene2species = phylo.read_gene2species(options.smap)
    gene_tree = treelib.read_tree(treefile)

    if options.coaldupcost is None:
        options.coaldupcost = options.coalcost

    gene_tree, labeled_recon, runtime, cost = ilprecon.ilp_recon(gene_tree, stree, gene2species,
                                                                 dupcost=options.dupcost, losscost=options.losscost,
                                                                 coalcost=options.coalcost,
                                                                 coaldupcost=options.coaldupcost, delay=False)

    out = util.replace_ext(treefile, options.inext, options.outext)

    with util.open_stream(out + ".info", 'w') as out_info:
        out_info.write("Runtime:\t%f sec\n" % runtime)
        out_info.write("Optimal Cost:\t%f\n" % cost)

        print('info', out.split('/')[-3:], cost)

    # output the .order, .tree, and .recon files
    filestreams = {
        "tree": util.open_stream(out + ".tree", 'w'),
        "recon": util.open_stream(out + ".recon", 'w'),
        "order": util.open_stream(out + ".order", 'w')
    }
    if labeled_recon is not None:
        labeled_recon.write(out, gene_tree, filestreams=filestreams)

    for stream in filestreams.values():
        stream.close()


if __name__ == "__main__":
    sys.exit(main())
